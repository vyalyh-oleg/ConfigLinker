# primitives and wrappers
# ----------------------------------------
type.boolean.true = true
type.boolean.True = True
type.boolean.false = false
type.boolean.False = False
type.boolean.wrong = wrong

type.byte = 100
type.byte.wrong = 128

type.char = r
type.char.intcode = FFCC9811 !!
type.char.wrong = rb

type.short = 30802
type.short.wrong = -33000

type.int.bin = 0b011101101 !!
type.int.oct = 01234567 !!
type.int.dec = 2045968711
type.int.dec.wrong = 2245968711
type.int.hex = 0xFEDCBA90 !!
type.int.withDelimiters = 2,000,000,000 !!

type.long = 1234567890987654321
type.long.wrong = 19234567890987654321

type.float = 0.000103
type.float.exponent = 0.000103e-14
type.float.wrong = 2.04e+!13

type.double = 2.040332982365
type.double.exponent = 2.040332e-101
type.double.wrong = 2.040332-101


# Strings
# ----------------------------------------

# the default value for FactoryConfigBuilder.isIgnoreWhitespaces() == true, that's why the whitespaces are trimmed for every and any property value

type.String.1 = Just a simple \
    multiline text

# spaces on the next line of multiline text don't take into account, only spaces before sign '\' have meaning if the next line is empty
type.String.2 = Just a simple \
    multiline text\
    
# in this case two words are concatenated 'simplemultiline', and we use ':' instead '='
type.String.3 :   Just a simple\
    multiline text   

type.String.4 = Just a simple \n \
    multiline text

type.String.5 = Just a simple \r \
    multiline text \ 

type.String.6 = \ Just a simple \b \
    multiline text  \ 

type.String.7 = Just a simple \f \
    multiline text

\!type.String.8 = The key with exclamation '!' mark at first position
\ type.String.9 = The key with space ' ' at first position
type.String.10 \= = The key with equal mark '='
type.String.11 \: : The key with colon mark ':'
\!\ my\ text = \  \:  param adf adf
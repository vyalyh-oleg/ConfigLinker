// output help information
//println 'gradle :build -Prelease -- to make release build (not a snapshot)'


buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		//jcenter()

		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}

	dependencies {
		classpath "com.adarshr:gradle-test-logger-plugin:1.5.0"
	}
}

/*
plugins {
	id "com.adarshr.test-logger" version "1.5.0"
}
*/

//apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven'
//apply plugin: 'application'

apply plugin: 'com.adarshr.test-logger'

repositories {
	mavenLocal()
	mavenCentral()
	//jcenter()
}

project.ext {
	developerAddress = project.properties["developer.address"]
	developerName = project.properties["developer.name"]
	developerEmail = project.properties["developer.email"]
	automaticModuleName = project.properties["project.automaticModuleName"]
	inceptionYear = project.properties["inceptionYear"]

	scmRepositoryAddress = project.properties["scm.repository.address"]
	scmRepositoryConnection = project.properties["scm.repository.connection"]

	// dependency versions
	junitJupiterVersion ="5.3.2"
	junitPlatformVersion="1.3.2"
}

dependencies {
    // This dependency is found on compile classpath of this component and consumers.

	implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
	implementation group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.7.25'

	// This dependency is exported to consumers, that is to say found on their compile classpath.
	//    api

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
	//    implementation

	testRuntimeOnly group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
	testRuntimeOnly group: 'org.fusesource.jansi', name: 'jansi', version: '1.16'

    // Use JUnit test framework
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: project.junitJupiterVersion
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: project.junitJupiterVersion
	testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: project.junitJupiterVersion
	testRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-launcher', version: project.junitPlatformVersion
//	testRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-console', version: project.properties['junit.platform.version']
//	testRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-runner', version: project.properties['junit.platform.version']
//	testRuntimeOnly group: 'org.junit.vintage', name: 'junit-vintage-engine', version: project.properties['junit.jupiter.version']
}


// Project configuration:
group = project.properties["package.group"]
archivesBaseName = project.properties["package.artifact"]
version = project.properties["package.version"] + "-" + project.properties["project.status"]
//version = version + "-b" + new Date().format('yyMMdd.HHmmss') + "-SNAPSHOT"

description = "*ConfigLinker* is a library designed to make it easier and more intuitive for developers to work with configuration `property` files."

project.sourceCompatibility = JavaVersion.VERSION_1_8
project.targetCompatibility = JavaVersion.VERSION_1_8

/*
javadoc {
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = project.name
	options.addStringOption('Xdoclint:none', '-quiet')
}
*/

jar {
	manifest {
		attributes 'Implementation-Name': project.archivesBaseName,
				'Implementation-Version': project.version,
				'Implementation-Vendor' : project.developerName,
				'Implementation-Vendor-Address': project.developerAddress,
				'Implementation-Vendor-Email': project.developerEmail,
				'Automatic-Module-Name': project.automaticModuleName
	}
}

tasks.withType(JavaCompile) {
	//enable compilation in a separate daemon process
	//options.fork = true
	options.compilerArgs += ["-parameters"]
	println("Compiler arguments for $taskIdentity.name: " + options.allCompilerArgs)
}

task javadocJar(type: Jar) {
	archiveClassifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	archiveClassifier = 'sources'
	from sourceSets.main.allSource
}

/* Publishing config */
/*
artifacts {
	archives javadocJar, sourcesJar
}
*/

// add all the info required by Maven Central to the pom
configure(install.repositories.mavenInstaller) {
	pom.project {
		packaging 'jar'

		inceptionYear project.inceptionYear
		name project.archivesBaseName
		description project.description
		url project.developerAddress

		scm {
			url project.scmRepositoryAddress
			connection project.scmRepositoryAddress
			developerConnection project.scmRepositoryAddress
		}

		licenses {
			license {
				name 'The Apache License, Version 2.0'
				url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
			}
		}

		developers {
			developer {
				id project.developerName
				name project.developerName
				email project.developerEmail
			}
		}
	}
}


/*
tasks.withType(JavaExec) {
	if (System.getProperty('debug', 'false') == 'true') {
		jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9009'
	}
}
*/

//import org.gradle.api.tasks.testing.logging.TestExceptionFormat
//import org.gradle.api.tasks.testing.logging.TestLogEvent

test {
	//debug=true
	//failFast = true

	systemProperty 'java.util.logging.config.file', 'logging.properties'
	systemProperty 'org.slf4j.simpleLogger.defaultLogLevel', 'TRACE'
	systemProperty 'user.timezone', 'UTC'
	//systemProperty 'java.util.logging.manager', 'org.apache.logging.log4j.jul.LogManager'

	workingDir "./test_workdir"
	
	useJUnitPlatform{
		// includeTags 'fast', 'smoke & feature-a'
		// excludeTags 'slow', 'ci'
		// includeEngines 'junit-jupiter'
		// excludeEngines 'junit-vintage'
	}

	testlogger {
		// pick a theme - mocha, standard, plain, mocha-parallel, standard-parallel or plain-parallel
		theme 'standard'

		// set to false to disable detailed failure logs
		showExceptions true

		// set threshold in milliseconds to highlight slow tests
		slowThreshold 1000

		// displays a breakdown of passes, failures and skips along with total duration
		showSummary true

		// set to false to hide passed tests
		showPassed true

		// set to false to hide skipped tests
		showSkipped true

		// set to false to hide failed tests
		showFailed true

		// enable to see standard out and error streams inline with the test results
		showStandardStreams false

		// set to false to hide passed standard out and error streams
		showPassedStandardStreams true

		// set to false to hide skipped standard out and error streams
		showSkippedStandardStreams true

		// set to false to hide failed standard out and error streams
		showFailedStandardStreams true
	}
/*
	testLogging {
//		events "passed", "skipped", "failed", "standardOut", "standardError"
		events TestLogEvent.FAILED,
				TestLogEvent.PASSED,
				TestLogEvent.SKIPPED
				//TestLogEvent.STANDARD_OUT,
				//TestLogEvent.STANDARD_ERROR
		exceptionFormat TestExceptionFormat.FULL
	}
*/

/*
	testLogging {
		// set options for log level LIFECYCLE
		events TestLogEvent.FAILED,
				TestLogEvent.PASSED,
				TestLogEvent.SKIPPED,
				TestLogEvent.STANDARD_OUT
		exceptionFormat TestExceptionFormat.FULL
		showExceptions true
		showCauses true
		showStackTraces true

		// set options for log level DEBUG and INFO
		debug {
			events TestLogEvent.STARTED,
					TestLogEvent.FAILED,
					TestLogEvent.PASSED,
					TestLogEvent.SKIPPED,
					TestLogEvent.STANDARD_ERROR,
					TestLogEvent.STANDARD_OUT
			exceptionFormat TestExceptionFormat.FULL
		}
		info.events = debug.events
		info.exceptionFormat = debug.exceptionFormat

		afterSuite { desc, result ->
			if (!desc.parent) { // will match the outermost suite
				def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
				def startItem = '|  ', endItem = '  |'
				def repeatLength = startItem.length() + output.length() + endItem.length()
				println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
			}
		}
	}
*/
}

/*
cleanTest {
	delete "./test_workdir.tmp"
}
*/

test.doFirst {
	println "See reports here: '" + reportsDir + "'."
/*
	mkdir("./test_workdir")
	copy {
		from "./workdir"
		into "./test_workdir"
	}
*/
}

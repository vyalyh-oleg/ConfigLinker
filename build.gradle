// output help information
//println 'gradle :build -Prelease -- to make release build (not a snapshot)'


buildscript {
	repositories {
		mavenLocal()

/*
		maven {
			name "internal"
			url project.'repo.internal.url'
			credentials { username(archivaUserName); password(archivaUserPass) }
		}

		maven {
			name "own-repo"
			url project.'repo.own.url'
			credentials { username(archivaUserName); password(archivaUserPass) }
		}
*/

		mavenCentral()
//		jcenter()
	}
	dependencies {
		
	}
}

//apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven'
//apply plugin: 'application'


repositories {
	mavenLocal()

/*
	maven {
		name "internal"
		url project.'repo.internal.url'
		credentials { username(archivaUserName); password(archivaUserPass) }
	}

	maven {
		name "own-repo"
		url project.'repo.own.url'
		credentials { username(archivaUserName); password(archivaUserPass) }
	}
*/

	mavenCentral()
//	jcenter()
}

dependencies {
    // This dependency is found on compile classpath of this component and consumers.

	implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
	implementation group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.7.25'

	// This dependency is exported to consumers, that is to say found on their compile classpath.
//    api

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
//    implementation

	testRuntimeOnly group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
	testRuntimeOnly group: 'org.fusesource.jansi', name: 'jansi', version: '1.16'

    // Use JUnit test framework
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: project.properties['junit.jupiter.version']
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: project.properties['junit.jupiter.version']
	testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: project.properties['junit.jupiter.version']
	testRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-launcher', version: project.properties['junit.platform.version']
//	testRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-console', version: project.properties['junit.platform.version']
//	testRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-runner', version: project.properties['junit.platform.version']
//	testRuntimeOnly group: 'org.junit.vintage', name: 'junit-vintage-engine', version: project.properties['junit.jupiter.version']
}


project.ext {
	address = project.properties["address"]
	email = project.properties["email"]
}

// Project configuration:
group = project.properties["package.group"]
archivesBaseName = project.properties["package.artifact"]
version = project.properties["package.version"] + "-" + project.properties["project.status"]
//version = version + "-b" + new Date().format('yyMMdd.HHmmss') + "-SNAPSHOT"


project.sourceCompatibility = 1.8
project.targetCompatibility = 1.8


/*
javadoc {
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = project.name
	options.addStringOption('Xdoclint:none', '-quiet')
}
*/

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}


/*
tasks.withType(JavaExec) {
	if (System.getProperty('debug', 'false') == 'true') {
		jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9009'
	}
}
*/

test {
	//debug=true
	//failFast = true

	systemProperty 'java.util.logging.config.file', 'logging.properties'
	systemProperty 'org.slf4j.simpleLogger.defaultLogLevel', 'TRACE'
	//systemProperty 'java.util.logging.manager', 'org.apache.logging.log4j.jul.LogManager'

	workingDir "./test_workdir"
	
	useJUnitPlatform{
		// includeTags 'fast', 'smoke & feature-a'
		// excludeTags 'slow', 'ci'
		// includeEngines 'junit-jupiter'
		// excludeEngines 'junit-vintage'
	}
}

/*
cleanTest {
	delete "./test_workdir.tmp"
}
*/

test.doFirst {
	println "See reports here: '" + reportsDir + "'."
/*
	mkdir("./test_workdir")
	copy {
		from "./workdir"
		into "./test_workdir"
	}
*/
}
